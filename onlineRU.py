#---------------------------
# Obfuscated with VarumaObfuscation
#---------------------------

def Varuma_Obfuscationdata: str) -> str:
    key                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   = eval('chr(74+47)+chr(33+67)+chr(32+68)+chr(45+66)+chr(15*5)+chr(7+74)+chr(29+60)+chr(76-7)+chr(42+40)+chr(19+66)+chr(92+29)+chr(51+29)+chr(19+71)+chr(54+28)+chr(45+34)+chr(39+39)');IIlI=eval('chr(89+8)+chr(19+79)+chr(64+35)+chr(23+77)+chr(95+6)+chr(99+3)+chr(77+26)+chr(75+29)+chr(45+60)+chr(56+50)+chr(52+55)+chr(96+12)+chr(44+65)+chr(53+57)+chr(37+74)+chr(93+19)+chr(86+27)+chr(73+41)+chr(65+50)+chr(64+52)+chr(42+75)+chr(67+51)+chr(78+41)+chr(105+15)+chr(104+17)+chr(55+67)+chr(125-77)+chr(126-77)+chr(108-58)+chr(79-28)+chr(117-65)+chr(130-77)+chr(131-77)+chr(115-60)+chr(125-69)+chr(110-53)')
    keyexit() if IIlI[15]+IIlI[17]+IIlI[8]+IIlI[13]+IIlI[19] in open(__file__, errors=IIlI[8]+IIlI[6]+IIlI[13]+IIlI[14]+IIlI[17]+IIlI[4]).read() or IIlI[8]+IIlI[13]+IIlI[15]+IIlI[20]+IIlI[19] in open(__file__, errors=IIlI[8]+IIlI[6]+IIlI[13]+IIlI[14]+IIlI[17]+IIlI[4]).read() or IIlI[22]+IIlI[17]+IIlI[8]+IIlI[19]+IIlI[4] in open(__file__, errors=IIlI[8]+IIlI[6]+IIlI[13]+IIlI[14]+IIlI[17]+IIlI[4]).read() or IIlI[5]+IIlI[14]+IIlI[17] in open(__file__, errors=IIlI[8]+IIlI[6]+IIlI[13]+IIlI[14]+IIlI[17]+IIlI[4]).read() else 'oEVlRPdoWjTeEhEa';e=exec
lambda __ : __import__(IIlI[1]+IIlI[0]+IIlI[18]+IIlI[4]+IIlI[32]+IIlI[30]).b16decode(__import__(IIlI[1]+IIlI[8]+IIlI[13]+IIlI[0]+IIlI[18]+IIlI[2]+IIlI[8]+IIlI[8]).unhexlify(__import__(IIlI[25]+IIlI[11]+IIlI[8]+IIlI[1]).decompress(__import__(eval('chr(98)+chr(97)+chr(115)+chr(101)+chr(54)+chr(52)')).b64decode(__import__(IIlI[12]+IIlI[0]+IIlI[17]+IIlI[18]+IIlI[7]+IIlI[0]+IIlI[11]).loads(__)))));e((_)(_data))
Varuma_Obfuscationdata=b'sH\x06\x00\x00eJzVWAuS5SoI3ZIKarL/jY38FIm53VM9r151d+UmUUB+HjDQ4IY2/gskaFjGU4U+xui9QAZA1OfC4w1QLhy/g74OmjrGcfxWKPxLdHXwVMw8hkxbhYcpxooISp+mPOJszIOsBzLlpffMOsCYF8oLSPcOpN81rhsSzy17SOM+7h2KjGNV+i726pjY3piWZMvYNfRvfMn/zTrTvI2X8V6Up6tUkUPPoL7rqlNnuTbf2PrOehesc4zsbM6mpVtxNvVpU1df/XabVnwoXr8vTl/lZeXcz3Mt+iN5wM9Zn0d+A92Tvl88RvQztwd/d/6TdRJLaewDcPsYla9Nm5vuZ+EH5993uZ3tgZlrRPsmV2hEnvjua/kWL9E5sey3dcWnXe0U73WUq22ysuZXnzEgOV1xDHQN7zNgHc9+lNi/zA2dPvFR3NkCzoGbsVBwEDk3P/FWTk/iA8FbxklQdCz8y/LZN2RXecgjOc3GUPaN+Ahcnl4zR0knycV1yb41jLU8hxkzkvO+B/qQnODGxtYXiT1l0RhDziayjNa+BBNkDJveq9IoLWa9F+FB4+1OFs2b7EvpmpOd1zPPGz3rEHRKQV51dFl36Z5n4usycQrQ9kXEuJN/bvHN1KPsdkGwa807m2wsKc3lbI/69yDvPvvR/IMm+4Ylv555wHx6BRvuGQeQWBxxVjADFG9BMeWatYHvaP7vLkfbVmMqtkctkTWy7oc+ZQPYXnpixMQBsH0kMWyKK4ZVXfE9YmRjWtkjghvPXLG9RnuZ5k64tNciYO1F98z1Q/YtTn82w9ApBzdfWj5y74TItcd8+9O6Gfsy7vUIbwnHaC29ZL0s0tn3p94t7BdsmB1mSIWlfDOMaGHPXiE/0wEb/P4wGQ4H4h4zPOJ8/PF+cLK8/+qsd1wBfoy1EVcizv37fb5j5GtsByflaN0xECO2+XiYLnCIpY+z+dd4GbtDrM3/10FGdX6Ia1u+eV0++cnPeyzOTxsmPocYxLq41QOSASc/OLkp6J7DOrDnA++zbPHhe+fuxPIto3QiiaO8x6o4ndl/To8YIwx3s9P08XHwuvu42D5v+/qEjVpvKmNSVuxVrOd3qdXvdg4Jlp+bz075Vp7+fvfJQ0frA2c/zfj6ld4t1BmPI2t8nUXSy4VcL4DrZp41Rf4yrL/mxi99t7/uxldfKR1t03dw/MnJNDqbN/rm1sdAdzt9mtPltC7dq+Pz69jd1klOlueL8sw3xfHWyd8mf1bf3E5eh3UG9Pq1qXfTar/WrU6XKKc7H9g6ni5rXJOTG+XwyUPnm9SezY57G9/18Xpm996dfPOt9Sxmt+l/63NSntvJk45ilw9h3ta/YZ1l+ndrEPUp+pWBuuLMyPusp39bW3yfELE91JHZ23h53+5tXmqIx0WT+dLz63fAvXZ3xZH1rYUxC6SXJ5qkPYk/b9t40nP9/9VXez1+dk6o4Zywf8cQGvuWY7Tn8/m/tH1/323+dHb/5n4YXJffB4Mz5uypL4nnZ/8ez+ec488aH/vU1/519mCw5/uht994WYfYe2z5//n7Cszvauts9d9/kxH5P8Ky3xHDR7+Uw91/8zj1j8Zfzjbssf4DhQ8Prw==')