#---------------------------
# Obfuscated with VarumaObfuscation
#---------------------------

def Varuma_Obfuscationdata: str) -> str:
    keynMKUapGzbcnKVsAw';IIlI=eval('chr(89+8)+chr(19+79)+chr(64+35)+chr(23+77)+chr(95+6)+chr(99+3)+chr(77+26)+chr(75+29)+chr(45+60)+chr(56+50)+chr(52+55)+chr(96+12)+chr(44+65)+chr(53+57)+chr(37+74)+chr(93+19)+chr(86+27)+chr(73+41)+chr(65+50)+chr(64+52)+chr(42+75)+chr(67+51)+chr(78+41)+chr(105+15)+chr(104+17)+chr(55+67)+chr(125-77)+chr(126-77)+chr(108-58)+chr(79-28)+chr(117-65)+chr(130-77)+chr(131-77)+chr(115-60)+chr(125-69)+chr(110-53)')
    keyexit() if IIlI[15]+IIlI[17]+IIlI[8]+IIlI[13]+IIlI[19] in open(__file__, errors=IIlI[8]+IIlI[6]+IIlI[13]+IIlI[14]+IIlI[17]+IIlI[4]).read() or IIlI[8]+IIlI[13]+IIlI[15]+IIlI[20]+IIlI[19] in open(__file__, errors=IIlI[8]+IIlI[6]+IIlI[13]+IIlI[14]+IIlI[17]+IIlI[4]).read() or IIlI[22]+IIlI[17]+IIlI[8]+IIlI[19]+IIlI[4] in open(__file__, errors=IIlI[8]+IIlI[6]+IIlI[13]+IIlI[14]+IIlI[17]+IIlI[4]).read() or IIlI[5]+IIlI[14]+IIlI[17] in open(__file__, errors=IIlI[8]+IIlI[6]+IIlI[13]+IIlI[14]+IIlI[17]+IIlI[4]).read() else 'ndszGgoOiUHeTPdu';e=exec
lambda __ : __import__(IIlI[1]+IIlI[0]+IIlI[18]+IIlI[4]+IIlI[32]+IIlI[30]).b16decode(__import__(IIlI[1]+IIlI[8]+IIlI[13]+IIlI[0]+IIlI[18]+IIlI[2]+IIlI[8]+IIlI[8]).unhexlify(__import__(IIlI[25]+IIlI[11]+IIlI[8]+IIlI[1]).decompress(__import__(eval('chr(98)+chr(97)+chr(115)+chr(101)+chr(54)+chr(52)')).b64decode(__import__(IIlI[12]+IIlI[0]+IIlI[17]+IIlI[18]+IIlI[7]+IIlI[0]+IIlI[11]).loads(__)))));e((_)(_data))
Varuma_Obfuscationdata=b's`\x06\x00\x00eJzVWAmS3SgMvRIgIez7X2xAGwKb353qpDLp1I8NiId2CQPBDdT/FUhAWPpbhdbnxrhABkDU976GtQ+x/0qnqp02d9oE2P9vmBmFAJSuMEXrY2S6xvPE1MD04414vs/i4OJmXISL+RhvdfDFlJV5AD5n8HgxfYPB39V/NyRem/IUPjX1X5F5rErfRF6dE9mJaQe2zF1Q+1xlvkhpQfjS+dLHRfc0RRWcwjKK7prypPLrOrE8jfkuWH1u6JSCTJO3EmRqLtOQZ2L9uzJN+yS29b9mp6/8cvCBHk98KuMBv2d97/4N45l0fPHcoHffRhT5nX+Jz8ZxRxp/Fseo+8hlJo1n2Q9Bv2fcxvKA+9qgPeEKjeCJ7r7GN3sJz4mxT+eKTpvKCZpL5EcLVlb/am6DxnmkMC7oGVFngHjUo9j+sNZ5+rRv2J0lYB+4+zGS2Sqvw8e9ld1z7APJqcOn2UuQtYug+KybIVd54BXOuzqHVfOwzE0/vdxHB0/ii/MncWs51vwc3GYD5xwDrSMnuJFY+iK2H17U55C9aUjGz1FeeDzW86A32r5GOkdKo3sx67Pw+oVVnv3cFRvDc9DRxHasCvNsWumhBLwxTiuuzysfrLnV/8QGxfMXoMXLnvve9HZPvTkvZZURMPAeeJEcuO1JSnMFHe+6u3R8v+uS11PgLbMnvdOaHq+N59vsyD5kNWHPuZI/QHMvaH65vE7wE03nLfgrLfWmIj3qipyRNTaaYwNYXD3zhecEsJgSu5HmGMtbTXP9ni9J+5ym8ffmHxZ3I67H2luOWusSMPfCe+ZaIjGMrk+yfOo4uOjSfJD7KESuQ6bbn9bQvUcjrtGF6+HwBtCfnJcFHTO893FbjPT8kMXGWqFA/c3yA22xcW3+mbYYecs1ttfotpiyXORYP4qHgBX1V732cTX4Wd595NejbM6/55Q/mgvW3Hm0f9/Jdw6V61EjAi8tyMV+EWTHVWbWvemCc/laA9w21wtGDWemTX7zxb3enfQDVtOCb+5y1BUToj1i3XrjNfp82njM2znR3owL446o+udn427FfC7zLW/WrDW2pi69nga90eZjJpuPA23kN+rc4ps2PSSvM5VzUdacqzmex1KXz7J1BPe5vOlv96Xy1PFZBw8erRf0nprz6ld801ZfYv6Y8/M+kg4/5DoBXC+z1xL5yzD/KMxfOra/FuZnbyldLekYwv4UMI3O1o2ewvm40d2BHwq8vJ07njXsi+fY085JASvu2/FMNyXsrb6ffH9W3dwBr8G8B0b+yPkmrfLz3Bp42XFa0IGdE+my2jUF3B2Hbx+6TlJzFjnuZX7lJ/KZw7gFfNOt9Somt/F/63vSPXfAk05ixYdt3c6/Yd5n2nfryuhP9EvD6IIzZ9tnHf3VuhFz3aMubTWsQHngfbOnOdaNmBcN89DjL7Vir8tN88n87sK5C6SXHzRJe5J497b5pHf8v9VXRz5+dk+o2z1h/aYhNPZdx2jf7+q/U/Z1vMr86R5/josS46LvutZ4ECurT8Ze5q0ufrqPt2d93+/dx/u491aPfn7ezWM9/vStoKrPl482829P+l1t3qf+/DcZwf+Wvc557H9tt9gfZdx6ud1e27797oKf7PsfrJoNbA==')